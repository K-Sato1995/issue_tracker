import gql from "graphql-tag";
import * as ReactApolloHooks from "react-apollo-hooks";
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
};

/** Autogenerated input type of CreateIssue */
export type CreateIssueInput = {
  title?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  status?: Maybe<Scalars["Int"]>;
  priority?: Maybe<Scalars["Int"]>;
  deadline?: Maybe<Scalars["Int"]>;
  projectId?: Maybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateIssue */
export type CreateIssuePayload = {
  __typename?: "CreateIssuePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  issue?: Maybe<Issue>;
  result?: Maybe<Scalars["Boolean"]>;
};

/** Autogenerated input type of CreateProgress */
export type CreateProgressInput = {
  description?: Maybe<Scalars["String"]>;
  spentTime?: Maybe<Scalars["Int"]>;
  issueId?: Maybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateProgress */
export type CreateProgressPayload = {
  __typename?: "CreateProgressPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  progress?: Maybe<Progress>;
  result?: Maybe<Scalars["Boolean"]>;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  name?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateProject */
export type CreateProjectPayload = {
  __typename?: "CreateProjectPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  project?: Maybe<Project>;
  result?: Maybe<Scalars["Boolean"]>;
};

export type Issue = {
  __typename?: "Issue";
  deadline: Scalars["DateTime"];
  description: Scalars["String"];
  id: Scalars["ID"];
  priority: Scalars["Int"];
  progresses: Array<Progress>;
  project: Project;
  status: Scalars["Int"];
  title: Scalars["String"];
};

export type Mutation = {
  __typename?: "Mutation";
  createIssue?: Maybe<CreateIssuePayload>;
  createProgress?: Maybe<CreateProgressPayload>;
  createProject?: Maybe<CreateProjectPayload>;
};

export type MutationCreateIssueArgs = {
  input: CreateIssueInput;
};

export type MutationCreateProgressArgs = {
  input: CreateProgressInput;
};

export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};

export type Progress = {
  __typename?: "Progress";
  description: Scalars["String"];
  id: Scalars["ID"];
  issue: Issue;
  spentTime: Scalars["Int"];
};

export type Project = {
  __typename?: "Project";
  description: Scalars["String"];
  id: Scalars["ID"];
  issues: Array<Issue>;
  name: Scalars["String"];
};

export type Query = {
  __typename?: "Query";
  issues: Array<Issue>;
  progresses: Array<Progress>;
  projects: Array<Project>;
};
export type IssuesQueryVariables = {};

export type IssuesQuery = { __typename?: "Query" } & {
  issues: Array<
    { __typename?: "Issue" } & Pick<
      Issue,
      "id" | "title" | "description" | "status" | "priority" | "deadline"
    >
  >;
};

export const IssuesDocument = gql`
  query issues {
    issues {
      id
      title
      description
      status
      priority
      deadline
    }
  }
`;

export function useIssuesQuery(
  baseOptions?: ReactApolloHooks.QueryHookOptions<IssuesQueryVariables>
) {
  return ReactApolloHooks.useQuery<IssuesQuery, IssuesQueryVariables>(
    IssuesDocument,
    baseOptions
  );
}
export type IssuesQueryHookResult = ReturnType<typeof useIssuesQuery>;
