import gql from 'graphql-tag';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  DateTime: any,
};

export type Category = {
  __typename?: 'Category',
  description: Scalars['String'],
  id: Scalars['ID'],
  issues: Array<Issue>,
  name: Scalars['String'],
};

/** Autogenerated input type of CreateCategory */
export type CreateCategoryInput = {
  name?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of CreateCategory */
export type CreateCategoryPayload = {
  __typename?: 'CreateCategoryPayload',
  category?: Maybe<Category>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  result?: Maybe<Scalars['Boolean']>,
};

/** Autogenerated input type of CreateIssue */
export type CreateIssueInput = {
  title?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  status?: Maybe<Scalars['Int']>,
  priority?: Maybe<Scalars['Int']>,
  deadline?: Maybe<Scalars['Int']>,
  categoryId?: Maybe<Scalars['ID']>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of CreateIssue */
export type CreateIssuePayload = {
  __typename?: 'CreateIssuePayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  issue?: Maybe<Issue>,
  result?: Maybe<Scalars['Boolean']>,
};

/** Autogenerated input type of CreateProgress */
export type CreateProgressInput = {
  description?: Maybe<Scalars['String']>,
  spentTime?: Maybe<Scalars['Int']>,
  issueId?: Maybe<Scalars['ID']>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of CreateProgress */
export type CreateProgressPayload = {
  __typename?: 'CreateProgressPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  progress?: Maybe<Progress>,
  result?: Maybe<Scalars['Boolean']>,
};


export type Issue = {
  __typename?: 'Issue',
  category: Category,
  deadline: Scalars['DateTime'],
  description: Scalars['String'],
  id: Scalars['ID'],
  priority: Scalars['Int'],
  progresses: Array<Progress>,
  status: Scalars['Int'],
  title: Scalars['String'],
};

export type Mutation = {
  __typename?: 'Mutation',
  createCategory?: Maybe<CreateCategoryPayload>,
  createIssue?: Maybe<CreateIssuePayload>,
  createProgress?: Maybe<CreateProgressPayload>,
};


export type MutationCreateCategoryArgs = {
  input: CreateCategoryInput
};


export type MutationCreateIssueArgs = {
  input: CreateIssueInput
};


export type MutationCreateProgressArgs = {
  input: CreateProgressInput
};

export type Progress = {
  __typename?: 'Progress',
  description: Scalars['String'],
  id: Scalars['ID'],
  issue: Issue,
  spentTime: Scalars['Int'],
};

export type Query = {
  __typename?: 'Query',
  categories: Array<Category>,
  issues: Array<Issue>,
  progresses: Array<Progress>,
};
